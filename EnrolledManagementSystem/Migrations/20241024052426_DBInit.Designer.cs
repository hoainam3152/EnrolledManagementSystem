// <auto-generated />
using System;
using EnrolledManagementSystem.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnrolledManagementSystem.Migrations
{
    [DbContext(typeof(ManagementDbContext))]
    [Migration("20241024052426_DBInit")]
    partial class DBInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EnrolledManagementSystem.Entities.AcademicYear", b =>
                {
                    b.Property<string>("AcademicYearID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicYearID");

                    b.ToTable("AcademicYear");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.BlockMarkType", b =>
                {
                    b.Property<string>("BlockID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ColumnNumber")
                        .HasColumnType("int");

                    b.Property<int>("ColumnRequired")
                        .HasColumnType("int");

                    b.Property<string>("CourseID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BlockID");

                    b.HasIndex("CourseID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TypeID");

                    b.ToTable("BlockMarkType");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Class", b =>
                {
                    b.Property<string>("ClassID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AcademicYearID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentNumber")
                        .HasColumnType("int");

                    b.Property<string>("TuitionFee")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClassID");

                    b.HasIndex("AcademicYearID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Course", b =>
                {
                    b.Property<string>("CourseID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseID");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Department", b =>
                {
                    b.Property<string>("DepartmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Deparment");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Lecturer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainSubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MinorSubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MainSubjectID");

                    b.ToTable("Lecturer");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.MarkType", b =>
                {
                    b.Property<string>("TypeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Coefficient")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeID");

                    b.ToTable("MarkType");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Receipt", b =>
                {
                    b.Property<string>("ReceiptID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("ActualRevenue")
                        .HasColumnType("float");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Content")
                        .HasColumnType("int");

                    b.Property<double>("Receive")
                        .HasColumnType("float");

                    b.Property<double>("Surcharge")
                        .HasColumnType("float");

                    b.Property<string>("TraineeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("TuitionFee")
                        .HasColumnType("float");

                    b.HasKey("ReceiptID");

                    b.HasIndex("ClassID");

                    b.HasIndex("TraineeID");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Result", b =>
                {
                    b.Property<string>("ResultID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Mark")
                        .HasColumnType("float");

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TraineeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TypeID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ResultID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TraineeID");

                    b.HasIndex("TypeID");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Subject", b =>
                {
                    b.Property<string>("SubjectID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DepartmentID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubjectID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("GroupID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.SubjectGroup", b =>
                {
                    b.Property<string>("SubjectGroupName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SubjectGroupName");

                    b.ToTable("SubjectGroup");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.TeachingAssignment", b =>
                {
                    b.Property<string>("AssignmentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClassRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LecturerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDay")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssignmentID");

                    b.HasIndex("ClassID");

                    b.ToTable("TeachingAssignment");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Trainee", b =>
                {
                    b.Property<string>("TraineeID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClassID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TraineeID");

                    b.ToTable("Trainee");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.BlockMarkType", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.MarkType", "MarkType")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("MarkType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Class", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Lecturer", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("MainSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Receipt", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.Trainee", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Result", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.Trainee", "Trainee")
                        .WithMany()
                        .HasForeignKey("TraineeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.MarkType", "MarkType")
                        .WithMany()
                        .HasForeignKey("TypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkType");

                    b.Navigation("Subject");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Subject", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.SubjectGroup", "SubjectGroup")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("SubjectGroup");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.TeachingAssignment", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });
#pragma warning restore 612, 618
        }
    }
}
