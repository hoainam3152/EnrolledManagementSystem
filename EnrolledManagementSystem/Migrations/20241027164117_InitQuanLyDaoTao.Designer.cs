// <auto-generated />
using EnrolledManagementSystem.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EnrolledManagementSystem.Migrations
{
    [DbContext(typeof(ManagementDbContext))]
    [Migration("20241027164117_InitQuanLyDaoTao")]
    partial class InitQuanLyDaoTao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EnrolledManagementSystem.Entities.Khoa", b =>
                {
                    b.Property<string>("MaKhoa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenKhoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaKhoa");

                    b.ToTable("Khoa");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.LoaiDiem", b =>
                {
                    b.Property<string>("MaLoaiDiem")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HeSo")
                        .HasColumnType("int");

                    b.Property<string>("TenLoaiDiem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaLoaiDiem");

                    b.ToTable("LoaiDiem");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.LopHoc", b =>
                {
                    b.Property<string>("MaLop")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HinhAnh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("HocPhi")
                        .HasColumnType("float");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaNienKhoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MoTat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SoLuongHocVien")
                        .HasColumnType("int");

                    b.Property<string>("TenLop")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaLop");

                    b.HasIndex("MaKhoa");

                    b.HasIndex("MaNienKhoa");

                    b.ToTable("LopHoc");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.MonHoc", b =>
                {
                    b.Property<string>("MaMonHoc")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaKhoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MaToBoMon")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenMonHoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaMonHoc");

                    b.HasIndex("MaKhoa");

                    b.HasIndex("MaToBoMon");

                    b.ToTable("MonHoc");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.NienKhoa", b =>
                {
                    b.Property<string>("MaNienKhoa")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TenNiemKhoa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaNienKhoa");

                    b.ToTable("NienKhoa");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.To_BoMon", b =>
                {
                    b.Property<string>("TenToBoMon")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TenToBoMon");

                    b.ToTable("To_BoMon");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.LopHoc", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Khoa", "Khoa")
                        .WithMany()
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.NienKhoa", "NienKhoa")
                        .WithMany()
                        .HasForeignKey("MaNienKhoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Khoa");

                    b.Navigation("NienKhoa");
                });

            modelBuilder.Entity("EnrolledManagementSystem.Entities.MonHoc", b =>
                {
                    b.HasOne("EnrolledManagementSystem.Entities.Khoa", "Khoa")
                        .WithMany()
                        .HasForeignKey("MaKhoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolledManagementSystem.Entities.To_BoMon", "To_BoMon")
                        .WithMany()
                        .HasForeignKey("MaToBoMon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Khoa");

                    b.Navigation("To_BoMon");
                });
#pragma warning restore 612, 618
        }
    }
}
